{"version":3,"file":"crypto-core.js","sources":["kotlin/text/numberConversions.kt","generated/_Arrays.kt","kotlin/UInt.kt","kotlin/ULong.kt","arrayUtils.kt","kotlin/UByte.kt","kotlin/collections.kt","generated/_Collections.kt","generated/_ArraysJs.kt","coroutines/Continuation.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/crypto/Util.kt","kotlin/text/string.kt","collections/Collections.kt","util/Standard.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/crypto/blake2b/Blake2b.kt","collections/Arrays.kt","kotlin/kotlin.kt","util/Result.kt","../../../../../../../../../../../dummy.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/crypto/sha/Sha256.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/crypto/sha/Sha512.kt"],"sourcesContent":[null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UByte @PublishedApi internal constructor(@PublishedApi internal val data: Byte) : Comparable<UByte> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UByte can have.\n         */\n        public const val MIN_VALUE: UByte = UByte(0)\n\n        /**\n         * A constant holding the maximum value an instance of UByte can have.\n         */\n        public const val MAX_VALUE: UByte = UByte(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 1\n\n        /**\n         * The number of bits used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BITS: Int = 8\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UByte = UByte(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UByte = UByte(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UByte): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UByte): UByte = UByte(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UByte): UByte = UByte(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UByte): UByte = UByte(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UByte = UByte(data.inv())\n\n    /**\n     * Converts this [UByte] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UByte`. Otherwise the result is negative.\n     *\n     * The resulting `Byte` value has the same binary representation as this `UByte` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data\n    /**\n     * Converts this [UByte] value to [Short].\n     *\n     * The resulting `Short` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Short` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort() and 0xFF\n    /**\n     * Converts this [UByte] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Int` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFF\n    /**\n     * Converts this [UByte] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Long` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFF\n\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = this\n    /**\n     * Converts this [UByte] value to [UShort].\n     *\n     * The resulting `UShort` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = UShort(data.toShort() and 0xFF)\n    /**\n     * Converts this [UByte] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFF)\n    /**\n     * Converts this [UByte] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFF)\n\n    /**\n     * Converts this [UByte] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UByte] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UByte].\n *\n * If this value is positive, the resulting `UByte` value represents the same numerical value as this `Byte`.\n *\n * The resulting `UByte` value has the same binary representation as this `Byte` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUByte(): UByte = UByte(this)\n/**\n * Converts this [Short] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Short`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Short` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Int] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Int` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Long] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Long` value.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUByte(): UByte = UByte(this.toByte())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Interface representing a continuation after a suspension point that returns a value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * The context of the coroutine that corresponds to this continuation.\n     */\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates a [Continuation] instance with the given [context] and implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without a receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts a coroutine without a receiver and with result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts a coroutine with receiver type [R] and result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * the currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where the suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T =\n    suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n\n/**\n * Returns the context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n",null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\n\n/**\n * Returns a single list of all elements from all arrays in the given array.\n * @sample samples.collections.Arrays.Transformations.flattenArray\n */\npublic fun <T> Array<out Array<out T>>.flatten(): List<T> {\n    val result = ArrayList<T>(sumBy { it.size })\n    for (element in this) {\n        result.addAll(element)\n    }\n    return result\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this array,\n * *second* list is built from the second values of each pair from this array.\n * @sample samples.collections.Arrays.Transformations.unzipArray\n */\npublic fun <T, R> Array<out Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val listT = ArrayList<T>(size)\n    val listR = ArrayList<R>(size)\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n\n/**\n * Returns `true` if this nullable array is either null or empty.\n * @sample samples.collections.Arrays.Usage.arrayIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun Array<*>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this array if it's not empty\n * or the result of calling [defaultValue] function if the array is empty.\n *\n * @sample samples.collections.Arrays.Usage.arrayIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"UPPER_BOUND_CANNOT_BE_ARRAY\")\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Array<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n@UseExperimental(ExperimentalUnsignedTypes::class)\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@kotlin.jvm.JvmName(\"contentDeepEquals\")\n@kotlin.js.JsName(\"contentDeepEqualsImpl\")\ninternal fun <T> Array<out T>.contentDeepEqualsImpl(other: Array<out T>): Boolean {\n    if (this === other) return true\n    if (this.size != other.size) return false\n\n    for (i in indices) {\n        val v1 = this[i]\n        val v2 = other[i]\n\n        if (v1 === v2) {\n            continue\n        } else if (v1 == null || v2 == null) {\n            return false\n        }\n\n        when {\n            v1 is Array<*>     && v2 is Array<*>     -> if (!v1.contentDeepEquals(v2)) return false\n            v1 is ByteArray    && v2 is ByteArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is ShortArray   && v2 is ShortArray   -> if (!v1.contentEquals(v2)) return false\n            v1 is IntArray     && v2 is IntArray     -> if (!v1.contentEquals(v2)) return false\n            v1 is LongArray    && v2 is LongArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is FloatArray   && v2 is FloatArray   -> if (!v1.contentEquals(v2)) return false\n            v1 is DoubleArray  && v2 is DoubleArray  -> if (!v1.contentEquals(v2)) return false\n            v1 is CharArray    && v2 is CharArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is BooleanArray && v2 is BooleanArray -> if (!v1.contentEquals(v2)) return false\n\n            v1 is UByteArray   && v2 is UByteArray   -> if (!v1.contentEquals(v2)) return false\n            v1 is UShortArray  && v2 is UShortArray  -> if (!v1.contentEquals(v2)) return false\n            v1 is UIntArray    && v2 is UIntArray    -> if (!v1.contentEquals(v2)) return false\n            v1 is ULongArray   && v2 is ULongArray   -> if (!v1.contentEquals(v2)) return false\n\n            else -> if (v1 != v2) return false\n        }\n\n    }\n    return true\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@kotlin.jvm.JvmName(\"contentDeepToString\")\n@kotlin.js.JsName(\"contentDeepToStringImpl\")\ninternal fun <T> Array<out T>.contentDeepToStringImpl(): String {\n    val length = size.coerceAtMost((Int.MAX_VALUE - 2) / 5) * 5 + 2 // in order not to overflow Int.MAX_VALUE\n    return buildString(length) {\n        contentDeepToStringInternal(this, mutableListOf())\n    }\n}\n\n@UseExperimental(ExperimentalUnsignedTypes::class)\nprivate fun <T> Array<out T>.contentDeepToStringInternal(result: StringBuilder, processed: MutableList<Array<*>>) {\n    if (this in processed) {\n        result.append(\"[...]\")\n        return\n    }\n    processed.add(this)\n    result.append('[')\n\n    for (i in indices) {\n        if (i != 0) {\n            result.append(\", \")\n        }\n        val element = this[i]\n        when (element) {\n            null            -> result.append(\"null\")\n            is Array<*>     -> element.contentDeepToStringInternal(result, processed)\n            is ByteArray    -> result.append(element.contentToString())\n            is ShortArray   -> result.append(element.contentToString())\n            is IntArray     -> result.append(element.contentToString())\n            is LongArray    -> result.append(element.contentToString())\n            is FloatArray   -> result.append(element.contentToString())\n            is DoubleArray  -> result.append(element.contentToString())\n            is CharArray    -> result.append(element.contentToString())\n            is BooleanArray -> result.append(element.contentToString())\n\n            is UByteArray   -> result.append(element.contentToString())\n            is UShortArray  -> result.append(element.contentToString())\n            is UIntArray    -> result.append(element.contentToString())\n            is ULongArray   -> result.append(element.contentToString())\n\n            else            -> result.append(element.toString())\n        }\n    }\n\n    result.append(']')\n    processed.removeAt(processed.lastIndex)\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\n\n/**\n * A discriminated union that encapsulates successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\npublic inline class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @InlineOnly\n        public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [exception] as failure.\n         */\n        @InlineOnly\n        public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching and encapsulating any thrown exception as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result\n * if invocation was successful, catching and encapsulating any thrown exception as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated exception\n * if it is [failure][Result.isFailure].\n *\n * This function is shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for encapsulated exception if it is [failure][Result.isFailure].\n *\n * Note, that an exception thrown by [onFailure] function is rethrown by this function.\n *\n * This function is shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the the result of [onSuccess] for encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for encapsulated exception if it is [failure][Result.isFailure].\n *\n * Note, that an exception thrown by [onSuccess] or by [onFailure] function is rethrown by this function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated exception if it is [failure][Result.isFailure].\n *\n * Note, that an exception thrown by [transform] function is rethrown by this function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated exception if it is [failure][Result.isFailure].\n *\n * Any exception thrown by [transform] function is caught, encapsulated as a failure and returned by this function.\n * See [map] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that an exception thrown by [transform] function is rethrown by this function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to encapsulated exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Any exception thrown by [transform] function is caught, encapsulated as a failure and returned by this function.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    val value = value // workaround for inline classes BE bug\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on encapsulated exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n",null,null,null],"names":[],"mappings":";;;;;;;;;;;mBAiGA,mC;uBCm9QA,gD;kBC95QI,kB;mBCAA,mB;;;;;;;;;;;;;;;;;;;gBCzIJ,K;aC4NiE,wB;oBC3NjE,qC;gCC2wCA,yD;kBC5wBA,mC;eH5OA,a;yBE45BA,+C;eAOA,wC;;;eE/pCA,oB;oBA6FA,uD;8BAAA,sD;;;;;;;;;;;;;;;;ICzGkE,OAAA,ECmJE,c;EDnJe,C;;ITkiRxE,kBAAM,eSniRE,STmiRW,OAAb,C;IA6UA,Q;IAAb,wBSh3Re,STg3Rf,gB;MAAa,WSh3RE,STg3Rf,M;MACI,WAAY,WDjyRsD,WCiyRxC,IDjyRwC,EUhFhC,EVgFgC,CCiyRtD,C;;ISj3RhB,eAA4C,QTk3RrC,WSl3RqC,EAAQ,EAAR,C;IHyhD5B,U;IAAA,SGxhDhB,QHwhDgB,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MGxhDG,QAAW,aHwhDD,OGxhDC,EAAyB,GAAzB,kCAA8B,4BAA9B,CAAX,C;;EACvB,C;;IAIkE,OAAA,EC8IE,c;ED9Ie,C;;IT6hRxE,kBAAM,eS9hRE,ST8hRW,OAAb,C;IA6UA,Q;IAAb,wBS32Re,ST22Rf,gB;MAAa,WS32RE,ST22Rf,M;MACI,WAAY,WS52Ra,ST42RC,IS52RD,EAAS,EAAT,CT42Rb,C;;IS52RhB,eAA4C,QT62RrC,WS72RqC,EAAQ,EAAR,C;IHohD5B,U;IAAA,SGnhDhB,QHmhDgB,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MGnhDG,QAAW,aHmhDD,OGnhDC,EAAyB,GAAzB,kCAA8B,8BAA9B,CAAX,C;;EACvB,C;;IAIkE,OAAA,ECyIE,c;EDzIe,C;;ITwhRxE,kBAAM,eSzhRE,STyhRW,OAAb,C;IA6UA,Q;IAAb,wBSt2Re,STs2Rf,gB;MAAa,WSt2RE,STs2Rf,M;MACI,WAAY,WSv2Ra,WTu2RC,ISv2RD,EAAS,EAAT,CTu2Rb,C;;ISv2RhB,eAA4C,QTw2RrC,WSx2RqC,EAAQ,CAAR,C;IH+gD5B,U;IAAA,SG9gDhB,QH8gDgB,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MG9gDG,QAAW,aH8gDD,OG9gDC,EAAyB,GAAzB,kCAA8B,8BAA9B,CAAX,C;;EACvB,C;gGAEA,yB;IAAA,0D;IAAA,sC;IAAA,8C;IAAA,mD;IEgGA,qE;ILmpCA,uF;ID3wCA,uD;IIwBA,qBAesB,yB;MJvCtB,uD;;QIuCwB,OJtC8C,YIsC9C,EJtC8C,C;MIsC5B,C;KAApB,C;IAftB,iD;MACI,WAAW,SAAK,OAAL,GAAY,S;MACvB,cAAc,SAAQ,C;MACtB,qBAAqB,SAAK,OAAL,GAAY,SAAZ,I;MEqGrB,WAAW,eFlG8C,CEkG9C,C;MCOX,iBAAc,CAAd,UHzGyD,CGyGzD,U;QDN6B,eFnGiC,WEmGjC,C;;MFnG7B,aEoGO,I;MFlGP,aAAU,CAAV,MAAkB,cAAlB,M;QACI,MAAO,WAAS,MAAL,SAAK,EAAM,qBAAI,SAAJ,GAAoB,YAAC,IAAI,CAAJ,IAAD,EAAU,SAAV,CAApB,CAAN,CAAT,C;;MAEX,IAAI,OAAJ,C;QACI,MAAO,WAAS,MAAL,SAAK,EAAM,kCAAiB,SAAjB,GAAiC,SAAK,OAAtC,CAAN,CAAT,C;;MH8uCJ,kBAAM,eAAa,wBG3uCnB,MH2uCmB,EAAwB,EAAxB,CAAb,C;MAqEA,Q;MAAA,OGhzCN,MHgzCM,W;MAAb,OAAa,cAAb,C;QAAa,sB;QACT,WAAY,WDv1CkD,YCu1CpC,IDv1CoC,CCu1ClD,C;;MGjzChB,OJtCkE,YCw1C3D,WDx1C2D,C;IIwCtE,C;GAjBA,C;;IAqBY,WR6F2C,cQ7F3C,SR6FgD,UQ7FvC,MR6FkC,C;IQ7FrB,eAAU,KAAK,MAAL,I;IAAjC,YR0F4C,cQ1FrB,SR0F0B,SAAS,QAAd,C;IQ1FnD,ORsGiD,cAAU,SAAL,GAAc,KAAM,KAAzB,C;EQrGrD,C;;IAIY,WPwF4C,eOxF5C,SPwFkD,yBOxFzC,MPwFyC,CAAN,C;IOxFtB,eAAU,KAAK,MAAL,I;IAAjC,YPqF6C,eOrFtB,SPqF4B,gBAAS,QAAT,CAAN,C;IOrFpD,OPiGmD,eAAW,SAAL,KAAc,KAAM,KAApB,CAAN,C;EOhGvD,C;EA3BA,qBAesB,yB;IJvCtB,uD;;MIuCwB,OJtC8C,YIsC9C,EJtC8C,C;IIsC5B,C;GAApB,C;;IDwFoB,oB;MAClC,WAAW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wBatrRe,CbsrRf,gB;MAAa,WatrRE,CbsrRf,M;mBACI,W;MarrRa,YAAO,wC;MAAQ,aTwFM,UAAW,OFjFZ,CAhEc,eF8uRrB,IE9uRgC,KAAL,KAAc,KAAM,KAApB,CAAN,CAgEd,MEiFY,SAAX,C;MSvFrB,YX7DmC,eFivRtB,IEjvR4B,yBW6DlC,CX7DkC,CAAN,C;MW6DnC,cAAa,wC;MAAQ,aTuFA,UAAW,OFjFZ,CAhEc,eAAW,UAAL,KAAc,OAAM,KAApB,CAAN,CAgEd,MEiFY,SAAX,C;MStFrB,cX9DmC,eFivRtB,IEjvR4B,yBW8DlC,EX9DkC,CAAN,C;MW8DnC,cAAc,wC;MAAQ,aTsFD,UAAW,OFjFZ,CAhEc,eAAW,YAAL,KAAc,OAAM,KAApB,CAAN,CAgEd,MEiFY,SAAX,C;MSrFrB,cX/DmC,eFivRtB,IEjvR4B,yBW+DlC,EX/DkC,CAAN,C;MW+DnC,cAAc,wC;MAAQ,aTqFD,UAAW,OFjFZ,CAhEc,eAAW,YAAL,KAAc,OAAM,KAApB,CAAN,CAgEd,MEiFY,SAAX,C;MSpFrB,cXhEmC,eFivRtB,IEjvR4B,yBWgElC,EXhEkC,CAAN,C;MWgEnC,cAAc,wC;MAAQ,aToFD,UAAW,OFjFZ,CAhEc,eAAW,YAAL,KAAc,OAAM,KAApB,CAAN,CAgEd,MEiFY,SAAX,C;MSnFrB,cXjEmC,eFivRtB,IEjvR4B,yBWiElC,EXjEkC,CAAN,C;MWiEnC,cAAc,wC;MAAQ,aTmFD,UAAW,OFjFZ,CAhEc,eAAW,YAAL,KAAc,OAAM,KAApB,CAAN,CAgEd,MEiFY,SAAX,C;MSlFrB,cXlEmC,eFivRtB,IEjvR4B,yBWkElC,EXlEkC,CAAN,C;MWkEnC,cAAc,wC;MAAQ,aTkFD,UAAW,OFjFZ,CAhEc,eAAW,YAAL,KAAc,OAAM,KAApB,CAAN,CAgEd,MEiFY,SAAX,C;MSjFrB,cXnEmC,eFivRtB,IEjvR4B,yBWmElC,EXnEkC,CAAN,C;MWmEnC,cAAc,wC;Mb8qRf,YAAZ,WAAY,EatrRJ,yDTyF0B,UAAW,OFjFZ,CAhEc,eAAW,YAAL,KAAc,OAAM,KAApB,CAAN,CAgEd,MEiFY,SAAX,CSzF1B,CbsrRI,C;;IMxsPT,oBAAU,kB;IAOD,U;IAAA,SNksPT,WMlsPS,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MACZ,WO3+BW,SP2+BU,OO3+BV,C;MP4+BC,OAAZ,aAAY,EAAO,IAAP,C;;IOx/BR,ORnM0D,YC6rC3D,aD7rC2D,C;EQiN9D,C;;IAGI,IAAI,QAAS,OAAT,KAAiB,GAArB,C;MACI,OAAO,Q;;IAGX,IAAI,QAAS,OAAT,GAAgB,GAApB,C;MACI,MAAM,2BAAsB,6BAAtB,C;;IV1NqC,YAAa,QU6N/C,GV7N+C,C;IAIvD,Q;IAAA,OAAA,KAAM,OAAN,GAAa,CAAb,I;IAAb,aAAU,CAAV,iB;MACe,e;MU0NC,IAAG,CAAH,IV1NI,CU0NJ,IV1NI,CU0NJ,GAAoB,eAApB,C;QADJ,cACgC,SV1NxB,CU0NwB,C;;;QADhC,cAEY,Y;;MV3NpB,MAAM,CAAN,e;;IUwNI,OVtND,K;EU6NH,C;;;;;;;;IA9MJ,wC;MAAA,uB;;IAAA,iC;EAAA,C;;IA4OI,IAAI,Kb++LD,YAAQ,Ca/+LX,C;MACI,MAAM,sBAAiB,qGAAjB,C;;IAIN,0BAAgB,KAAM,OAAtB,QAA6B,GAA7B,C;MAA4C,sBAAe,KAAf,EAAsB,kBAAtB,C;SAC5C,0BAAgB,KAAM,OAAtB,SAA8B,GAA9B,C;MJ/OR,WIgP0B,KJhPV,OAAL,GIgP6B,G;MJ/OxC,cAAc,SAAQ,C;MACtB,qBI8O0B,KJ9OA,OAAL,GI8OmB,GJ9OnB,I;MEqGrB,WAAW,eFlG8C,CEkG9C,C;MCOX,iBAAc,CAAd,UHzGyD,CGyGzD,U;QDN6B,eFnGiC,WEmGjC,C;;MFnG7B,aEoGO,I;MFlGP,aAAU,CAAV,MAAkB,cAAlB,M;QACI,MAAO,WAAS,MIwOM,KJxON,EAAM,qBIwOc,GJxOd,GAAoB,YAAC,IAAI,CAAJ,IAAD,EIwON,GJxOM,CAApB,CAAN,CAAT,C;;MAEX,IAAI,OAAJ,C;QACI,MAAO,WAAS,MIqOM,KJrON,EAAM,kCIqOc,GJrOd,GIqOA,KJrOsC,OAAtC,CAAN,CAAT,C;;MH8uCJ,kBAAM,eAAa,wBG3uCnB,MH2uCmB,EAAwB,EAAxB,CAAb,C;MAqEA,Q;MAAA,OGhzCN,MHgzCM,W;MAAb,OAAa,cAAb,C;QAAa,sB;QACT,WAAY,WDv1CkD,YCu1CpC,IDv1CoC,CCu1ClD,C;;MO/kCJ,cRxQsD,YCw1C3D,WDx1C2D,C;MLy/UlD,U;MAAhB,4BahvUY,ObgvUZ,kB;QAAgB,cahvUJ,ObgvUZ,Q;Qa/uUgB,IAAI,sBb+uUS,Oa/uUa,OAAtB,QAA6B,GAAjC,C;UACI,sBb8uUS,Oa9uUT,EAAsB,kBAAtB,C;;;UNuQpB,UPu+T6B,OOv+T7B,EMpQsC,WNoQtC,EMnQ4C,kBNmQ5C,EMlQqC,CNkQrC,EMjQmC,MAAc,kBAAd,INiQnC,C;UM/PoB,yCAAW,GAAX,C;UACA,oBAAa,WAAb,C;UVrRmC,cAAa,QUsR1B,GVtR0B,C;UAIvD,U;UAAA,SAAA,OAAM,OAAN,GAAa,CAAb,I;UAAb,eAAU,CAAV,uB;YACe,e;YUmR0B,U;YAAA,SbkuUZ,OaluUkB,OAAN,IAAc,GAAd,GAA4B,kBAA5B,K;YAAb,IAAI,CAAJ,IVnRR,GUmRQ,IVnRR,GUmRQ,U;cADJ,cbmuUK,OajuUG,CVpRZ,GUoRkB,IAAM,GAAN,GAAoB,kBAApB,KAAN,C;;;cAFR,cAKQ,Y;;YVvR5B,QAAM,GAAN,e;;UUiRgB,cV/Qb,O;UU0Ra,qBbytUS,OaztUa,OAAN,IAAc,GAAd,GAA4B,kBAA5B,K;;;;EAOpC,C;;IAG6C,gBAApB,kBAAN,KAAM,C;Ib4wQlB,kBAAM,eAAa,gBAAb,C;IA6UA,Q;IAAb,iD;MAAa,WAAb,e;MACI,WAAY,WI3oRsB,UJ2oRR,II3oRQ,CJ2oRtB,C;;Ia1lRZ,4BR1S8D,YLq4R3D,WKr4R2D,CQ0S9D,C;EACJ,C;;INuOA,UMpOI,KNoOJ,EMpOiC,WNoOjC,EMpO6D,KNoO7D,EMpOiF,CNoOjF,EMpO+F,KAAM,ONoOrG,C;IMnOI,0CAAiB,KAAM,OAAvB,I;EACJ,C;;IAGI,SAAI,iDAAS,MAAT,EAAY,KAAZ,EAAmB,YAAnB,EAA4B,KAA5B,C;EACR,C;;IAGsB,wC;IAAA,6B;IAAA,yB;IAAA,0C;IAAA,wC;IAAA,oC;EAGlB,C;;;;;;;;;;;;;YAFI,+CAAe,wBAAf,C;YACA,qBL7RR,oBQ6CQ,WHgPU,IGhPV,CR7CR,C;YK4RQ,W;;;;;;;;;;;;;;;;;;EAEJ,C;;IAHkB,yD;qBAAA,4H;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAD0C,qB;MACtD,OAAN,kBAAM,EAAO,gBAAP,UAAY,6DAAZ,C;MAKV,W;IANgE,C;EAAA,C;;IAAhE,wC;IAAA,yB;IAAA,kB;IAAA,0B;EAA0C,C;;;;;;;;;;;;;YLxL1C,gB;4BAAsC,wBKwL0B,mDLxL1B,CAAtC,M;gBAAA,kBS5IJ,mB;qBT4II,mB;YAAA,Q;;;;YAAA,a;YKwL0C,oB;;;;;;;;;;;;;;;;EAAA,C;;mBAA1C,2D;QAAA,S;aAAA,Q;;aAAA,uB;EAA0C,C;;IAQ1C,wC;IAAA,yB;IAAA,kB;IAAA,0B;EAEA,C;;;;;;;;;;;;;YADqC,gBAApB,kBAAN,gBAAM,C;YbuvQV,kBAAM,eAAa,gBAAb,C;YA6UA,Q;YAAb,iD;cAAa,WAAb,e;cACI,WAAY,WI3oRsB,UJ2oRR,II3oRQ,CJ2oRtB,C;;;YarkRZ,gB;4BAAA,0BR/T8D,YLq4R3D,WKr4R2D,CQ+T9D,O;gBAAA,kBI7UR,mB;qBJ6UQ,mB;YAAA,Q;;;;;;;;;;;;;;;;;;;;EACJ,C;;mBAFA,2D;QAAA,S;aAAA,Q;;aAAA,uB;EAEA,C;;IAII,sBAAsB,6CAAW,WAAX,C;IACtB,yCAAW,kBAAX,C;IACA,iDAAS,MAAT,EAAY,eAAZ,EAA6B,YAA7B,EAAsC,IAAtC,C;IAEA,aAAa,+CAAa,MAAb,C;IbouQV,kBAAM,eanuQD,MbmuQc,OAAb,C;IA6UA,Q;IAAb,wBahjRY,MbgjRZ,gB;MAAa,WahjRD,MbgjRZ,M;MACI,WAAY,WajjRY,SbijRE,IajjRF,EAAS,EAAT,CbijRZ,C;;IajjRZ,QAAuC,abkjRpC,WaljRoC,EAAyB,EAAzB,CAAvC,C;IACA,OAAO,M;EAEX,C;;IAGoB,gBAAT,a;Ib6tQJ,kBAAM,eAAa,gBAAb,C;IA6UA,Q;IAAb,iD;MAAa,WAAb,e;MACI,WAAY,Wa3iRa,Sb2iRC,Ia3iRD,EAAS,EAAT,Cb2iRb,C;;Ia3iRZ,OAAw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"}