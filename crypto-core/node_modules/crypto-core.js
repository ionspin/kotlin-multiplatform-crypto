(function (_, Kotlin, $module$bignum) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var chunked = Kotlin.kotlin.collections.chunked_ba2ldo$;
  var joinToString = Kotlin.kotlin.collections.joinToString_fmv235$;
  var println = Kotlin.kotlin.io.println_s8jyv4$;
  var toString = Kotlin.kotlin.text.toString_aogav3$;
  var toString_0 = Kotlin.kotlin.text.toString_hc3rh$;
  var defineInlineFunction = Kotlin.defineInlineFunction;
  var wrapFunction = Kotlin.wrapFunction;
  var toString_1 = Kotlin.kotlin.text.toString_dqglrj$;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var UInt_init = Kotlin.kotlin.UInt;
  var ULong_init = Kotlin.kotlin.ULong;
  var encodeToByteArray = Kotlin.kotlin.text.encodeToByteArray_pdl1vz$;
  var toList = Kotlin.kotlin.collections.toList_7wnvza$;
  var UByte = Kotlin.kotlin.UByte;
  var toBigInteger = $module$bignum.com.ionspin.kotlin.bignum.integer.toBigInteger_s8ev3n$;
  var toList_0 = Kotlin.kotlin.collections.toList_us0mfu$;
  var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var L255 = Kotlin.Long.fromInt(255);
  var Array_0 = Array;
  var copyToArray = Kotlin.kotlin.collections.copyToArray;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var toByte = Kotlin.toByte;
  var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var addAll = Kotlin.kotlin.collections.addAll_ipc267$;
  var until = Kotlin.kotlin.ranges.until_dqglrj$;
  var RuntimeException_init = Kotlin.kotlin.RuntimeException_init_pdl1vj$;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  var slice = Kotlin.kotlin.collections.slice_l0m14x$;
  function hexColumsPrint$lambda$lambda(it) {
    return it.toUpperCase();
  }
  function hexColumsPrint($receiver) {
    var destination = ArrayList_init($receiver.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var item = $receiver[tmp$];
      destination.add_11rb$(toString_1(item, 16));
    }
    var printout = chunked(destination, 16);
    var tmp$_0;
    tmp$_0 = printout.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      println(joinToString(element, ' ', void 0, void 0, void 0, void 0, hexColumsPrint$lambda$lambda));
    }
  }
  function hexColumsPrint$lambda$lambda_0(it) {
    return it.toUpperCase();
  }
  function hexColumsPrint_0($receiver) {
    var destination = ArrayList_init($receiver.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var item = $receiver[tmp$];
      destination.add_11rb$(toString(item, 16));
    }
    var printout = chunked(destination, 16);
    var tmp$_0;
    tmp$_0 = printout.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      println(joinToString(element, ' ', void 0, void 0, void 0, void 0, hexColumsPrint$lambda$lambda_0));
    }
  }
  function hexColumsPrint$lambda$lambda_1(it) {
    return it.toUpperCase();
  }
  function hexColumsPrint_1($receiver) {
    var destination = ArrayList_init($receiver.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var item = $receiver[tmp$];
      destination.add_11rb$(toString_0(item, 16));
    }
    var printout = chunked(destination, 3);
    var tmp$_0;
    tmp$_0 = printout.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      println(joinToString(element, ' ', void 0, void 0, void 0, void 0, hexColumsPrint$lambda$lambda_1));
    }
  }
  var chunked_0 = defineInlineFunction('crypto-core.com.ionspin.kotlin.crypto.chunked_r20n03$', wrapFunction(function () {
    var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
    var wrapFunction = Kotlin.wrapFunction;
    var until = Kotlin.kotlin.ranges.until_dqglrj$;
    var slice = Kotlin.kotlin.collections.slice_l0m14x$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
    var copyToArray = Kotlin.kotlin.collections.copyToArray;
    var chunked$lambda = wrapFunction(function () {
      var copyToArray = Kotlin.kotlin.collections.copyToArray;
      return function (it) {
        return copyToArray(it);
      };
    });
    return function (T_0, isT, $receiver, sliceSize) {
      var last = $receiver.length % sliceSize;
      var hasLast = last !== 0;
      var numberOfSlices = $receiver.length / sliceSize | 0;
      var list = ArrayList_init(0);
      for (var index = 0; index < 0; index++) {
        list.add_11rb$(emptyList());
      }
      var result = list;
      for (var i = 0; i < numberOfSlices; i++) {
        result.add_11rb$(slice($receiver, until(Kotlin.imul(i, sliceSize), Kotlin.imul(i + 1 | 0, sliceSize))));
      }
      if (hasLast) {
        result.add_11rb$(slice($receiver, until(Kotlin.imul(numberOfSlices, sliceSize), $receiver.length)));
      }
      var destination = ArrayList_init(collectionSizeOrDefault(result, 10));
      var tmp$;
      tmp$ = result.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(copyToArray(item));
      }
      return copyToArray(destination);
    };
  }));
  function rotateRight($receiver, places) {
    var tmp$ = new UInt_init($receiver.data >>> places);
    var bitCount = 32 - places | 0;
    var other = new UInt_init($receiver.data << bitCount);
    return new UInt_init(tmp$.data ^ other.data);
  }
  function rotateRight_0($receiver, places) {
    var tmp$ = new ULong_init($receiver.data.shiftRightUnsigned(places));
    var bitCount = 64 - places | 0;
    var other = new ULong_init($receiver.data.shiftLeft(bitCount));
    return new ULong_init(tmp$.data.xor(other.data));
  }
  function Blake2b() {
    Blake2b$Companion_getInstance();
  }
  function Blake2b$Companion() {
    Blake2b$Companion_instance = this;
    this.BITS_IN_WORD = 64;
    this.ROUNDS_IN_COMPRESS = 12;
    this.BLOCK_BYTES = 128;
    this.MAX_HASH_BYTES = 64;
    this.MIN_HASH_BYTES = 1;
    this.MAX_KEY_BYTES = 64;
    this.MIN_KEY_BYTES = 0;
    this.MAX_INPUT_BYTES = toBigInteger(2).shl_za3lpa$(128);
    this.sigma_0 = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3], [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4], [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8], [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13], [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9], [12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11], [13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10], [6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5], [10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0]];
    this.iv_0 = [new ULong_init(new Kotlin.Long(-205731576, 1779033703)), new ULong_init(new Kotlin.Long(-2067093701, -1150833019)), new ULong_init(new Kotlin.Long(-23791573, 1013904242)), new ULong_init(new Kotlin.Long(1595750129, -1521486534)), new ULong_init(new Kotlin.Long(-1377402159, 1359893119)), new ULong_init(new Kotlin.Long(725511199, -1694144372)), new ULong_init(new Kotlin.Long(-79577749, 528734635)), new ULong_init(new Kotlin.Long(327033209, 1541459225))];
    this.R1 = 32;
    this.R2 = 24;
    this.R3 = 16;
    this.R4 = 63;
  }
  function Blake2b$Companion$mixRound$lambda$lambda(it) {
    return it.toUpperCase();
  }
  Blake2b$Companion.prototype.mixRound_r29y2p$ = function (input, message, round) {
    var v = input;
    var selectedSigma = this.sigma_0[round % 10];
    var $receiver = v;
    var destination = ArrayList_init($receiver.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var item = $receiver[tmp$];
      destination.add_11rb$(toString_0(item, 16));
    }
    var printout = chunked(destination, 3);
    var tmp$_0;
    tmp$_0 = printout.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      println(joinToString(element, ' ', void 0, void 0, void 0, void 0, Blake2b$Companion$mixRound$lambda$lambda));
    }
    v = this.mix_0(v, 0, 4, 8, 12, message[selectedSigma[0]], message[selectedSigma[1]]);
    v = this.mix_0(v, 1, 5, 9, 13, message[selectedSigma[2]], message[selectedSigma[3]]);
    v = this.mix_0(v, 2, 6, 10, 14, message[selectedSigma[4]], message[selectedSigma[5]]);
    v = this.mix_0(v, 3, 7, 11, 15, message[selectedSigma[6]], message[selectedSigma[7]]);
    v = this.mix_0(v, 0, 5, 10, 15, message[selectedSigma[8]], message[selectedSigma[9]]);
    v = this.mix_0(v, 1, 6, 11, 12, message[selectedSigma[10]], message[selectedSigma[11]]);
    v = this.mix_0(v, 2, 7, 8, 13, message[selectedSigma[12]], message[selectedSigma[13]]);
    v = this.mix_0(v, 3, 4, 9, 14, message[selectedSigma[14]], message[selectedSigma[15]]);
    return v;
  };
  Blake2b$Companion.prototype.mix_0 = function (v, a, b, c, d, x, y) {
    var $this = v[a];
    var other = v[b];
    v[a] = new ULong_init((new ULong_init($this.data.add(other.data))).data.add(x.data));
    var $this_0 = v[d];
    var other_0 = v[a];
    v[d] = rotateRight_0(new ULong_init($this_0.data.xor(other_0.data)), 32);
    var $this_1 = v[c];
    var other_1 = v[d];
    v[c] = new ULong_init($this_1.data.add(other_1.data));
    var $this_2 = v[b];
    var other_2 = v[c];
    v[b] = rotateRight_0(new ULong_init($this_2.data.xor(other_2.data)), 24);
    var $this_3 = v[a];
    var other_3 = v[b];
    v[a] = new ULong_init((new ULong_init($this_3.data.add(other_3.data))).data.add(y.data));
    var $this_4 = v[d];
    var other_4 = v[a];
    v[d] = rotateRight_0(new ULong_init($this_4.data.xor(other_4.data)), 16);
    var $this_5 = v[c];
    var other_5 = v[d];
    v[c] = new ULong_init($this_5.data.add(other_5.data));
    var $this_6 = v[b];
    var other_6 = v[c];
    v[b] = rotateRight_0(new ULong_init($this_6.data.xor(other_6.data)), 63);
    return v;
  };
  function Blake2b$Companion$compress$lambda$lambda(it) {
    return it.toUpperCase();
  }
  Blake2b$Companion.prototype.compress_c1cv33$ = function (h, input, offsetCounter, finalBlock) {
    var array = Array_0(16);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var init$result;
      if (i >= 0 && i <= 7) {
        init$result = h[i];
      }
       else {
        init$result = this.iv_0[i - 8 | 0];
      }
      array[i] = init$result;
    }
    var v = array;
    var array_0 = Array_0(16);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = new ULong_init(Kotlin.Long.ZERO);
    }
    var tmp$_1, tmp$_0_0;
    var index = 0;
    var accumulator = array_0;
    for (tmp$_1 = 0; tmp$_1 !== input.length; ++tmp$_1) {
      var element = input[tmp$_1];
      var index_0 = (tmp$_0_0 = index, index = tmp$_0_0 + 1 | 0, tmp$_0_0);
      var acc = accumulator;
      var slot = index_0 / 8 | 0;
      var position = index_0 % 8;
      var tmp$_2 = acc[slot];
      var $this = new ULong_init(Kotlin.Long.fromInt(element.data).and(L255));
      var bitCount = position * 8 | 0;
      var other = new ULong_init($this.data.shiftLeft(bitCount));
      acc[slot] = new ULong_init(tmp$_2.data.add(other.data));
      accumulator = acc;
    }
    var m = accumulator;
    println('m');
    var destination = ArrayList_init(m.length);
    var tmp$_3;
    for (tmp$_3 = 0; tmp$_3 !== m.length; ++tmp$_3) {
      var item = m[tmp$_3];
      destination.add_11rb$(toString_0(item, 16));
    }
    var printout = chunked(destination, 4);
    var tmp$_4;
    tmp$_4 = printout.iterator();
    while (tmp$_4.hasNext()) {
      var element_0 = tmp$_4.next();
      println(joinToString(element_0, ' ', void 0, void 0, void 0, void 0, Blake2b$Companion$compress$lambda$lambda));
    }
    println('Offset ' + offsetCounter);
    var $this_0 = v[12];
    var other_0 = offsetCounter.ulongValue_6taknv$();
    v[12] = new ULong_init($this_0.data.xor(other_0.data));
    var $this_1 = v[13];
    var other_1 = offsetCounter.shr_za3lpa$(64).ulongValue_6taknv$();
    v[13] = new ULong_init($this_1.data.xor(other_1.data));
    if (finalBlock) {
      v[14] = new ULong_init(v[14].data.inv());
    }
    for (var i_1 = 0; i_1 < 12; i_1++) {
      this.mixRound_r29y2p$(v, m, i_1);
    }
    for (var i_2 = 0; i_2 <= 7; i_2++) {
      var $this_2 = h[i_2];
      var other_2 = v[i_2];
      var $this_3 = new ULong_init($this_2.data.xor(other_2.data));
      var other_3 = v[i_2 + 8 | 0];
      h[i_2] = new ULong_init($this_3.data.xor(other_3.data));
    }
    return h;
  };
  Blake2b$Companion.prototype.digest_jyasbz$ = function (inputString, key) {
    if (key === void 0)
      key = null;
    var tmp$;
    var $receiver = encodeToByteArray(inputString);
    var destination = ArrayList_init($receiver.length);
    var tmp$_0;
    for (tmp$_0 = 0; tmp$_0 !== $receiver.length; ++tmp$_0) {
      var item = $receiver[tmp$_0];
      destination.add_11rb$(new UByte(item));
    }
    var $receiver_0 = chunked(toList(destination), 128);
    var destination_0 = ArrayList_init(collectionSizeOrDefault($receiver_0, 10));
    var tmp$_1;
    tmp$_1 = $receiver_0.iterator();
    while (tmp$_1.hasNext()) {
      var item_0 = tmp$_1.next();
      destination_0.add_11rb$(copyToArray(item_0));
    }
    var chunked_0 = copyToArray(destination_0);
    var tmp$_2;
    if (key != null) {
      var $receiver_1 = encodeToByteArray(key);
      var destination_1 = ArrayList_init($receiver_1.length);
      var tmp$_3;
      for (tmp$_3 = 0; tmp$_3 !== $receiver_1.length; ++tmp$_3) {
        var item_1 = $receiver_1[tmp$_3];
        destination_1.add_11rb$(new UByte(item_1));
      }
      tmp$_2 = copyToArray(destination_1);
    }
     else
      tmp$_2 = null;
    var keyBytes = (tmp$ = tmp$_2) != null ? tmp$ : [];
    return this.digest_qdhiwk$(chunked_0, keyBytes);
  };
  Blake2b$Companion.prototype.digest_qdhiwk$ = function (inputMessage, secretKey, hashLength) {
    if (inputMessage === void 0) {
      inputMessage = [];
    }
    if (secretKey === void 0) {
      secretKey = [];
    }
    if (hashLength === void 0)
      hashLength = 64;
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var h = this.iv_0.slice();
    var $this = h[0];
    var other = new ULong_init(Kotlin.Long.fromInt(16842752));
    var tmp$_3 = new ULong_init($this.data.xor(other.data));
    var other_0 = new ULong_init((new ULong_init(Kotlin.Long.fromInt(secretKey.length))).data.shiftLeft(8));
    var tmp$_4 = new ULong_init(tmp$_3.data.xor(other_0.data));
    var other_1 = new ULong_init(Kotlin.Long.fromInt(hashLength));
    h[0] = new ULong_init(tmp$_4.data.xor(other_1.data));
    if (secretKey.length === 0) {
      if (inputMessage.length === 0) {
        var array = Array_0(1);
        var tmp$_5;
        tmp$_5 = array.length - 1 | 0;
        for (var i = 0; i <= tmp$_5; i++) {
          var array_0 = Array_0(128);
          var tmp$_6;
          tmp$_6 = array_0.length - 1 | 0;
          for (var i_0 = 0; i_0 <= tmp$_6; i_0++) {
            array_0[i_0] = new UByte(0);
          }
          array[i] = array_0;
        }
        tmp$ = array;
      }
       else {
        tmp$ = inputMessage;
      }
    }
     else {
      var padToBlock_0$result;
      padToBlock_0$break: do {
        if (secretKey.length === 128) {
          padToBlock_0$result = secretKey;
          break padToBlock_0$break;
        }
        if (secretKey.length > 128) {
          throw IllegalStateException_init('Block larger than 128 bytes');
        }
        var array_1 = Array_0(128);
        var tmp$_7;
        tmp$_7 = array_1.length - 1 | 0;
        for (var i_1 = 0; i_1 <= tmp$_7; i_1++) {
          var init$result;
          if (0 <= i_1 && i_1 < secretKey.length) {
            init$result = secretKey[i_1];
          }
           else {
            init$result = new UByte(0);
          }
          array_1[i_1] = init$result;
        }
        padToBlock_0$result = array_1;
      }
       while (false);
      tmp$ = [padToBlock_0$result].concat(inputMessage);
    }
    var message = tmp$;
    if (message.length > 1) {
      tmp$_0 = message.length - 1 | 0;
      for (var i_2 = 0; i_2 < tmp$_0; i_2++) {
        var $receiver = this.compress_c1cv33$(h, message[i_2], toBigInteger((i_2 + 1 | 0) * 128 | 0), false);
        arrayCopy($receiver, h, 0, 0, $receiver.length);
        hexColumsPrint_1(h);
      }
    }
    switch (message.length) {
      case 0:
        tmp$_1 = 0;
        break;
      case 1:
        tmp$_1 = message[message.length - 1 | 0].length;
        break;
      default:tmp$_1 = ((message.length - 1 | 0) * 128 | 0) + message[message.length - 1 | 0].length | 0;
        break;
    }
    var lastSize = tmp$_1;
    if (!(message.length === 0)) {
      var unpadded = message[message.length - 1 | 0];
      var padToBlock_0$result_0;
      padToBlock_0$break: do {
        if (unpadded.length === 128) {
          padToBlock_0$result_0 = unpadded;
          break padToBlock_0$break;
        }
        if (unpadded.length > 128) {
          throw IllegalStateException_init('Block larger than 128 bytes');
        }
        var array_2 = Array_0(128);
        var tmp$_8;
        tmp$_8 = array_2.length - 1 | 0;
        for (var i_3 = 0; i_3 <= tmp$_8; i_3++) {
          var init$result_0;
          if (0 <= i_3 && i_3 < unpadded.length) {
            init$result_0 = unpadded[i_3];
          }
           else {
            init$result_0 = new UByte(0);
          }
          array_2[i_3] = init$result_0;
        }
        padToBlock_0$result_0 = array_2;
      }
       while (false);
      tmp$_2 = padToBlock_0$result_0;
    }
     else {
      var array_3 = Array_0(16);
      var tmp$_9;
      tmp$_9 = array_3.length - 1 | 0;
      for (var i_4 = 0; i_4 <= tmp$_9; i_4++) {
        array_3[i_4] = new UByte(0);
      }
      tmp$_2 = array_3;
    }
    var lastBlockPadded = tmp$_2;
    var $receiver_0 = this.compress_c1cv33$(h, lastBlockPadded, toBigInteger(lastSize), true);
    arrayCopy($receiver_0, h, 0, 0, $receiver_0.length);
    var destination = ArrayList_init(h.length);
    var tmp$_10;
    for (tmp$_10 = 0; tmp$_10 !== h.length; ++tmp$_10) {
      var item = h[tmp$_10];
      var tmp$_11 = destination.add_11rb$;
      var other_2 = new ULong_init(Kotlin.Long.fromInt(255));
      var tmp$_12 = new UByte(toByte((new ULong_init(item.data.and(other_2.data))).data.toInt()));
      var $this_0 = new ULong_init(item.data.shiftRightUnsigned(8));
      var other_3 = new ULong_init(Kotlin.Long.fromInt(255));
      var tmp$_13 = new UByte(toByte((new ULong_init($this_0.data.and(other_3.data))).data.toInt()));
      var $this_1 = new ULong_init(item.data.shiftRightUnsigned(16));
      var other_4 = new ULong_init(Kotlin.Long.fromInt(255));
      var tmp$_14 = new UByte(toByte((new ULong_init($this_1.data.and(other_4.data))).data.toInt()));
      var $this_2 = new ULong_init(item.data.shiftRightUnsigned(24));
      var other_5 = new ULong_init(Kotlin.Long.fromInt(255));
      var tmp$_15 = new UByte(toByte((new ULong_init($this_2.data.and(other_5.data))).data.toInt()));
      var $this_3 = new ULong_init(item.data.shiftRightUnsigned(32));
      var other_6 = new ULong_init(Kotlin.Long.fromInt(255));
      var tmp$_16 = new UByte(toByte((new ULong_init($this_3.data.and(other_6.data))).data.toInt()));
      var $this_4 = new ULong_init(item.data.shiftRightUnsigned(40));
      var other_7 = new ULong_init(Kotlin.Long.fromInt(255));
      var tmp$_17 = new UByte(toByte((new ULong_init($this_4.data.and(other_7.data))).data.toInt()));
      var $this_5 = new ULong_init(item.data.shiftRightUnsigned(48));
      var other_8 = new ULong_init(Kotlin.Long.fromInt(255));
      var tmp$_18 = new UByte(toByte((new ULong_init($this_5.data.and(other_8.data))).data.toInt()));
      var $this_6 = new ULong_init(item.data.shiftRightUnsigned(56));
      var other_9 = new ULong_init(Kotlin.Long.fromInt(255));
      tmp$_11.call(destination, [tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, new UByte(toByte((new ULong_init($this_6.data.and(other_9.data))).data.toInt()))]);
    }
    var destination_0 = ArrayList_init_0();
    var tmp$_19;
    tmp$_19 = destination.iterator();
    while (tmp$_19.hasNext()) {
      var element = tmp$_19.next();
      var list = toList_0(element);
      addAll(destination_0, list);
    }
    return copyToArray(destination_0);
  };
  Blake2b$Companion.prototype.padToBlock_0 = wrapFunction(function () {
    var Array_0 = Array;
    return function (unpadded) {
      if (unpadded.length === 128) {
        return unpadded;
      }
      if (unpadded.length > 128) {
        throw IllegalStateException_init('Block larger than 128 bytes');
      }
      var array = Array_0(128);
      var tmp$;
      tmp$ = array.length - 1 | 0;
      for (var i = 0; i <= tmp$; i++) {
        var init$result;
        if (0 <= i && i < unpadded.length) {
          init$result = unpadded[i];
        }
         else {
          init$result = new UByte(0);
        }
        array[i] = init$result;
      }
      return array;
    };
  });
  Blake2b$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Blake2b$Companion_instance = null;
  function Blake2b$Companion_getInstance() {
    if (Blake2b$Companion_instance === null) {
      new Blake2b$Companion();
    }
    return Blake2b$Companion_instance;
  }
  Blake2b.prototype.digest_jyasbz$ = function (inputString, key) {
    if (key === void 0)
      key = null;
    return Blake2b$Companion_getInstance().digest_jyasbz$(inputString, key);
  };
  Blake2b.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Blake2b',
    interfaces: []
  };
  var chunked$lambda = wrapFunction(function () {
    var copyToArray = Kotlin.kotlin.collections.copyToArray;
    return function (it) {
      return copyToArray(it);
    };
  });
  function Sha256() {
    Sha256$Companion_getInstance();
    this.h0 = new UInt_init(1779033703);
    this.h1 = new UInt_init(-1150833019);
    this.h2 = new UInt_init(1013904242);
    this.h3 = new UInt_init(-1521486534);
    this.h4 = new UInt_init(1359893119);
    this.h5 = new UInt_init(-1694144372);
    this.h6 = new UInt_init(528734635);
    this.h7 = new UInt_init(1541459225);
    this.k = [new UInt_init(1116352408), new UInt_init(1899447441), new UInt_init(-1245643825), new UInt_init(-373957723), new UInt_init(961987163), new UInt_init(1508970993), new UInt_init(-1841331548), new UInt_init(-1424204075), new UInt_init(-670586216), new UInt_init(310598401), new UInt_init(607225278), new UInt_init(1426881987), new UInt_init(1925078388), new UInt_init(-2132889090), new UInt_init(-1680079193), new UInt_init(-1046744716), new UInt_init(-459576895), new UInt_init(-272742522), new UInt_init(264347078), new UInt_init(604807628), new UInt_init(770255983), new UInt_init(1249150122), new UInt_init(1555081692), new UInt_init(1996064986), new UInt_init(-1740746414), new UInt_init(-1473132947), new UInt_init(-1341970488), new UInt_init(-1084653625), new UInt_init(-958395405), new UInt_init(-710438585), new UInt_init(113926993), new UInt_init(338241895), new UInt_init(666307205), new UInt_init(773529912), new UInt_init(1294757372), new UInt_init(1396182291), new UInt_init(1695183700), new UInt_init(1986661051), new UInt_init(-2117940946), new UInt_init(-1838011259), new UInt_init(-1564481375), new UInt_init(-1474664885), new UInt_init(-1035236496), new UInt_init(-949202525), new UInt_init(-778901479), new UInt_init(-694614492), new UInt_init(-200395387), new UInt_init(275423344), new UInt_init(430227734), new UInt_init(506948616), new UInt_init(659060556), new UInt_init(883997877), new UInt_init(958139571), new UInt_init(1322822218), new UInt_init(1537002063), new UInt_init(1747873779), new UInt_init(1955562222), new UInt_init(2024104815), new UInt_init(-2067236844), new UInt_init(-1933114872), new UInt_init(-1866530822), new UInt_init(-1538233109), new UInt_init(-1090935817), new UInt_init(-965641998)];
  }
  function Sha256$Companion() {
    Sha256$Companion_instance = this;
    this.BLOCK_SIZE = 512;
    this.W_SIZE = 64;
    this.UINT_MASK = new UInt_init(-1);
    this.BYTE_MASK_FROM_ULONG = new ULong_init(Kotlin.Long.fromInt(255));
    this.BYTE_MASK_FROM_UINT = new UInt_init(255);
  }
  Sha256$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Sha256$Companion_instance = null;
  function Sha256$Companion_getInstance() {
    if (Sha256$Companion_instance === null) {
      new Sha256$Companion();
    }
    return Sha256$Companion_instance;
  }
  Sha256.prototype.digest_ummv9a$ = function (message) {
    var tmp$;
    var originalMessageSizeInBits = message.length * 8 | 0;
    var expandedRemainderOf512 = (originalMessageSizeInBits + 65 | 0) % 512;
    if (expandedRemainderOf512 === 0)
      tmp$ = 0;
    else
      tmp$ = (512 - expandedRemainderOf512 | 0) / 8 | 0;
    var zeroAddAmount = tmp$;
    var array = Array_0(zeroAddAmount + 1 | 0);
    var tmp$_0;
    tmp$_0 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_0; i++) {
      var init$result;
      if (i === 0) {
        init$result = new UByte(-128);
      }
       else {
        init$result = new UByte(0);
      }
      array[i] = init$result;
    }
    var expansionArray = array;
    var tmp$_1 = message.concat(expansionArray);
    var elements = this.toPaddedByteArray_0(new ULong_init(Kotlin.Long.fromInt(originalMessageSizeInBits)));
    var $receiver = tmp$_1.concat(elements);
    var last = $receiver.length % 64;
    var hasLast = last !== 0;
    var numberOfSlices = $receiver.length / 64 | 0;
    var list = ArrayList_init(0);
    for (var index = 0; index < 0; index++) {
      list.add_11rb$(emptyList());
    }
    var result = list;
    for (var i_0 = 0; i_0 < numberOfSlices; i_0++) {
      result.add_11rb$(slice($receiver, until(Kotlin.imul(i_0, 64), Kotlin.imul(i_0 + 1 | 0, 64))));
    }
    if (hasLast) {
      result.add_11rb$(slice($receiver, until(Kotlin.imul(numberOfSlices, 64), $receiver.length)));
    }
    var destination = ArrayList_init(collectionSizeOrDefault(result, 10));
    var tmp$_2;
    tmp$_2 = result.iterator();
    while (tmp$_2.hasNext()) {
      var item = tmp$_2.next();
      destination.add_11rb$(copyToArray(item));
    }
    var chunks = copyToArray(destination);
    var tmp$_3;
    for (tmp$_3 = 0; tmp$_3 !== chunks.length; ++tmp$_3) {
      var element = chunks[tmp$_3];
      var array_0 = Array_0(64);
      var tmp$_4;
      tmp$_4 = array_0.length - 1 | 0;
      for (var i_1 = 0; i_1 <= tmp$_4; i_1++) {
        var init$result_0;
        if (0 <= i_1 && i_1 < 16) {
          var tmp$_5 = new UInt_init((new UInt_init(element[i_1 * 4 | 0].data & 255)).data << 24);
          var other = new UInt_init((new UInt_init(element[(i_1 * 4 | 0) + 1 | 0].data & 255)).data << 16);
          var tmp$_6 = new UInt_init(tmp$_5.data + other.data | 0);
          var other_0 = new UInt_init((new UInt_init(element[(i_1 * 4 | 0) + 2 | 0].data & 255)).data << 8);
          var tmp$_7 = new UInt_init(tmp$_6.data + other_0.data | 0);
          var other_1 = new UInt_init(element[(i_1 * 4 | 0) + 3 | 0].data & 255);
          var collected = new UInt_init(tmp$_7.data + other_1.data | 0);
          init$result_0 = collected;
        }
         else {
          init$result_0 = new UInt_init(0);
        }
        array_0[i_1] = init$result_0;
      }
      var w = array_0;
      for (var i_2 = 16; i_2 < 64; i_2++) {
        var s0 = this.scheduleSigma0_0(w[i_2 - 15 | 0]);
        var s1 = this.scheduleSigma1_0(w[i_2 - 2 | 0]);
        var $this = new UInt_init(w[i_2 - 16 | 0].data + s0.data | 0);
        var other_2 = w[i_2 - 7 | 0];
        w[i_2] = new UInt_init((new UInt_init($this.data + other_2.data | 0)).data + s1.data | 0);
      }
      var a = this.h0;
      var b = this.h1;
      var c = this.h2;
      var d = this.h3;
      var e = this.h4;
      var f = this.h5;
      var g = this.h6;
      var h = this.h7;
      for (var i_3 = 0; i_3 < 64; i_3++) {
        var s1_0 = this.compressionSigma1_0(e);
        var ch = this.ch_0(e, f, g);
        var $this_0 = new UInt_init((new UInt_init(h.data + s1_0.data | 0)).data + ch.data | 0);
        var other_3 = this.k[i_3];
        var $this_1 = new UInt_init($this_0.data + other_3.data | 0);
        var other_4 = w[i_3];
        var temp1 = new UInt_init($this_1.data + other_4.data | 0);
        var s0_0 = this.compressionSigma0_0(a);
        var maj = this.maj_0(a, b, c);
        var temp2 = new UInt_init(s0_0.data + maj.data | 0);
        h = g;
        g = f;
        f = e;
        e = new UInt_init(d.data + temp1.data | 0);
        d = c;
        c = b;
        b = a;
        a = new UInt_init(temp1.data + temp2.data | 0);
      }
      var $this_2 = this.h0;
      var other_5 = a;
      this.h0 = new UInt_init($this_2.data + other_5.data | 0);
      var $this_3 = this.h1;
      var other_6 = b;
      this.h1 = new UInt_init($this_3.data + other_6.data | 0);
      var $this_4 = this.h2;
      var other_7 = c;
      this.h2 = new UInt_init($this_4.data + other_7.data | 0);
      var $this_5 = this.h3;
      var other_8 = d;
      this.h3 = new UInt_init($this_5.data + other_8.data | 0);
      var $this_6 = this.h4;
      var other_9 = e;
      this.h4 = new UInt_init($this_6.data + other_9.data | 0);
      var $this_7 = this.h5;
      var other_10 = f;
      this.h5 = new UInt_init($this_7.data + other_10.data | 0);
      var $this_8 = this.h6;
      var other_11 = g;
      this.h6 = new UInt_init($this_8.data + other_11.data | 0);
      var $this_9 = this.h7;
      var other_12 = h;
      this.h7 = new UInt_init($this_9.data + other_12.data | 0);
    }
    var $receiver_0 = this.toPaddedByteArray_1(this.h0);
    var elements_0 = this.toPaddedByteArray_1(this.h1);
    var $receiver_1 = $receiver_0.concat(elements_0);
    var elements_1 = this.toPaddedByteArray_1(this.h2);
    var $receiver_2 = $receiver_1.concat(elements_1);
    var elements_2 = this.toPaddedByteArray_1(this.h3);
    var $receiver_3 = $receiver_2.concat(elements_2);
    var elements_3 = this.toPaddedByteArray_1(this.h4);
    var $receiver_4 = $receiver_3.concat(elements_3);
    var elements_4 = this.toPaddedByteArray_1(this.h5);
    var $receiver_5 = $receiver_4.concat(elements_4);
    var elements_5 = this.toPaddedByteArray_1(this.h6);
    var $receiver_6 = $receiver_5.concat(elements_5);
    var elements_6 = this.toPaddedByteArray_1(this.h7);
    var digest = $receiver_6.concat(elements_6);
    this.reset_0();
    return digest;
  };
  Sha256.prototype.reset_0 = function () {
    this.h0 = new UInt_init(1779033703);
    this.h1 = new UInt_init(-1150833019);
    this.h2 = new UInt_init(1013904242);
    this.h3 = new UInt_init(-1521486534);
    this.h4 = new UInt_init(1359893119);
    this.h5 = new UInt_init(-1694144372);
    this.h6 = new UInt_init(528734635);
    this.h7 = new UInt_init(1541459225);
  };
  Sha256.prototype.scheduleSigma0_0 = function (value) {
    var $this = rotateRight(value, 7);
    var other = rotateRight(value, 18);
    var tmp$ = new UInt_init($this.data ^ other.data);
    var other_0 = new UInt_init(value.data >>> 3);
    return new UInt_init(tmp$.data ^ other_0.data);
  };
  Sha256.prototype.scheduleSigma1_0 = function (value) {
    var $this = rotateRight(value, 17);
    var other = rotateRight(value, 19);
    var tmp$ = new UInt_init($this.data ^ other.data);
    var other_0 = new UInt_init(value.data >>> 10);
    return new UInt_init(tmp$.data ^ other_0.data);
  };
  Sha256.prototype.compressionSigma0_0 = function (a) {
    var $this = rotateRight(a, 2);
    var other = rotateRight(a, 13);
    var $this_0 = new UInt_init($this.data ^ other.data);
    var other_0 = rotateRight(a, 22);
    return new UInt_init($this_0.data ^ other_0.data);
  };
  Sha256.prototype.compressionSigma1_0 = function (e) {
    var $this = rotateRight(e, 6);
    var other = rotateRight(e, 11);
    var $this_0 = new UInt_init($this.data ^ other.data);
    var other_0 = rotateRight(e, 25);
    return new UInt_init($this_0.data ^ other_0.data);
  };
  Sha256.prototype.ch_0 = function (x, y, z) {
    var tmp$ = new UInt_init(x.data & y.data);
    var other = Sha256$Companion_getInstance().UINT_MASK;
    var other_0 = new UInt_init((new UInt_init(x.data ^ other.data)).data & z.data);
    return new UInt_init(tmp$.data ^ other_0.data);
  };
  Sha256.prototype.maj_0 = function (x, y, z) {
    var tmp$ = new UInt_init(x.data & y.data);
    var other = new UInt_init(x.data & z.data);
    var tmp$_0 = new UInt_init(tmp$.data ^ other.data);
    var other_0 = new UInt_init(y.data & z.data);
    return new UInt_init(tmp$_0.data ^ other_0.data);
  };
  Sha256.prototype.toPaddedByteArray_0 = function ($receiver) {
    var byteMask = Sha256$Companion_getInstance().BYTE_MASK_FROM_ULONG;
    var array = Array_0(8);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    loop_label: for (var i = 0; i <= tmp$; i++) {
      var init$result;
      init$break: do {
        switch (i) {
          case 7:
            init$result = new UByte(toByte((new ULong_init($receiver.data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 6:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(8))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 5:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(16))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 4:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(24))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 3:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(32))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 2:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(40))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 1:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(48))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 0:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(54))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          default:throw RuntimeException_init('Invalid conversion');
        }
      }
       while (false);
      array[i] = init$result;
    }
    return array;
  };
  Sha256.prototype.toPaddedByteArray_1 = function ($receiver) {
    var byteMask = Sha256$Companion_getInstance().BYTE_MASK_FROM_UINT;
    var array = Array_0(4);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    loop_label: for (var i = 0; i <= tmp$; i++) {
      var init$result;
      init$break: do {
        switch (i) {
          case 3:
            init$result = new UByte(toByte((new UInt_init($receiver.data & byteMask.data)).data));
            break init$break;
          case 2:
            init$result = new UByte(toByte((new UInt_init((new UInt_init($receiver.data >>> 8)).data & byteMask.data)).data));
            break init$break;
          case 1:
            init$result = new UByte(toByte((new UInt_init((new UInt_init($receiver.data >>> 16)).data & byteMask.data)).data));
            break init$break;
          case 0:
            init$result = new UByte(toByte((new UInt_init((new UInt_init($receiver.data >>> 24)).data & byteMask.data)).data));
            break init$break;
          default:throw RuntimeException_init('Invalid conversion');
        }
      }
       while (false);
      array[i] = init$result;
    }
    return array;
  };
  Sha256.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Sha256',
    interfaces: []
  };
  var chunked$lambda_0 = wrapFunction(function () {
    var copyToArray = Kotlin.kotlin.collections.copyToArray;
    return function (it) {
      return copyToArray(it);
    };
  });
  function Sha512() {
    Sha512$Companion_getInstance();
    this.h0 = new ULong_init(new Kotlin.Long(-205731576, 1779033703));
    this.h1 = new ULong_init(new Kotlin.Long(-2067093701, -1150833019));
    this.h2 = new ULong_init(new Kotlin.Long(-23791573, 1013904242));
    this.h3 = new ULong_init(new Kotlin.Long(1595750129, -1521486534));
    this.h4 = new ULong_init(new Kotlin.Long(-1377402159, 1359893119));
    this.h5 = new ULong_init(new Kotlin.Long(725511199, -1694144372));
    this.h6 = new ULong_init(new Kotlin.Long(-79577749, 528734635));
    this.h7 = new ULong_init(new Kotlin.Long(327033209, 1541459225));
  }
  function Sha512$Companion() {
    Sha512$Companion_instance = this;
    this.BLOCK_SIZE = 1024;
    this.ULONG_MASK = new ULong_init(Kotlin.Long.NEG_ONE);
    this.k = [new ULong_init(new Kotlin.Long(-685199838, 1116352408)), new ULong_init(new Kotlin.Long(602891725, 1899447441)), new ULong_init(new Kotlin.Long(-330482897, -1245643825)), new ULong_init(new Kotlin.Long(-2121671748, -373957723)), new ULong_init(new Kotlin.Long(-213338824, 961987163)), new ULong_init(new Kotlin.Long(-1241133031, 1508970993)), new ULong_init(new Kotlin.Long(-1357295717, -1841331548)), new ULong_init(new Kotlin.Long(-630357736, -1424204075)), new ULong_init(new Kotlin.Long(-1560083902, -670586216)), new ULong_init(new Kotlin.Long(1164996542, 310598401)), new ULong_init(new Kotlin.Long(1323610764, 607225278)), new ULong_init(new Kotlin.Long(-704662302, 1426881987)), new ULong_init(new Kotlin.Long(-226784913, 1925078388)), new ULong_init(new Kotlin.Long(991336113, -2132889090)), new ULong_init(new Kotlin.Long(633803317, -1680079193)), new ULong_init(new Kotlin.Long(-815192428, -1046744716)), new ULong_init(new Kotlin.Long(-1628353838, -459576895)), new ULong_init(new Kotlin.Long(944711139, -272742522)), new ULong_init(new Kotlin.Long(-1953704523, 264347078)), new ULong_init(new Kotlin.Long(2007800933, 604807628)), new ULong_init(new Kotlin.Long(1495990901, 770255983)), new ULong_init(new Kotlin.Long(1856431235, 1249150122)), new ULong_init(new Kotlin.Long(-1119749164, 1555081692)), new ULong_init(new Kotlin.Long(-2096016459, 1996064986)), new ULong_init(new Kotlin.Long(-295247957, -1740746414)), new ULong_init(new Kotlin.Long(766784016, -1473132947)), new ULong_init(new Kotlin.Long(-1728372417, -1341970488)), new ULong_init(new Kotlin.Long(-1091629340, -1084653625)), new ULong_init(new Kotlin.Long(1034457026, -958395405)), new ULong_init(new Kotlin.Long(-1828018395, -710438585)), new ULong_init(new Kotlin.Long(-536640913, 113926993)), new ULong_init(new Kotlin.Long(168717936, 338241895)), new ULong_init(new Kotlin.Long(1188179964, 666307205)), new ULong_init(new Kotlin.Long(1546045734, 773529912)), new ULong_init(new Kotlin.Long(1522805485, 1294757372)), new ULong_init(new Kotlin.Long(-1651133473, 1396182291)), new ULong_init(new Kotlin.Long(-1951439906, 1695183700)), new ULong_init(new Kotlin.Long(1014477480, 1986661051)), new ULong_init(new Kotlin.Long(1206759142, -2117940946)), new ULong_init(new Kotlin.Long(344077627, -1838011259)), new ULong_init(new Kotlin.Long(1290863460, -1564481375)), new ULong_init(new Kotlin.Long(-1136513023, -1474664885)), new ULong_init(new Kotlin.Long(-789014639, -1035236496)), new ULong_init(new Kotlin.Long(106217008, -949202525)), new ULong_init(new Kotlin.Long(-688958952, -778901479)), new ULong_init(new Kotlin.Long(1432725776, -694614492)), new ULong_init(new Kotlin.Long(1467031594, -200395387)), new ULong_init(new Kotlin.Long(851169720, 275423344)), new ULong_init(new Kotlin.Long(-1194143544, 430227734)), new ULong_init(new Kotlin.Long(1363258195, 506948616)), new ULong_init(new Kotlin.Long(-544281703, 659060556)), new ULong_init(new Kotlin.Long(-509917016, 883997877)), new ULong_init(new Kotlin.Long(-976659869, 958139571)), new ULong_init(new Kotlin.Long(-482243893, 1322822218)), new ULong_init(new Kotlin.Long(2003034995, 1537002063)), new ULong_init(new Kotlin.Long(-692930397, 1747873779)), new ULong_init(new Kotlin.Long(1575990012, 1955562222)), new ULong_init(new Kotlin.Long(1125592928, 2024104815)), new ULong_init(new Kotlin.Long(-1578062990, -2067236844)), new ULong_init(new Kotlin.Long(442776044, -1933114872)), new ULong_init(new Kotlin.Long(593698344, -1866530822)), new ULong_init(new Kotlin.Long(-561857047, -1538233109)), new ULong_init(new Kotlin.Long(-1295615723, -1090935817)), new ULong_init(new Kotlin.Long(-479046869, -965641998)), new ULong_init(new Kotlin.Long(-366583396, -903397682)), new ULong_init(new Kotlin.Long(566280711, -779700025)), new ULong_init(new Kotlin.Long(-840897762, -354779690)), new ULong_init(new Kotlin.Long(-294727304, -176337025)), new ULong_init(new Kotlin.Long(1914138554, 116418474)), new ULong_init(new Kotlin.Long(-1563912026, 174292421)), new ULong_init(new Kotlin.Long(-1090974290, 289380356)), new ULong_init(new Kotlin.Long(320620315, 460393269)), new ULong_init(new Kotlin.Long(587496836, 685471733)), new ULong_init(new Kotlin.Long(1086792851, 852142971)), new ULong_init(new Kotlin.Long(365543100, 1017036298)), new ULong_init(new Kotlin.Long(-1676669620, 1126000580)), new ULong_init(new Kotlin.Long(-885112138, 1288033470)), new ULong_init(new Kotlin.Long(-60457430, 1501505948)), new ULong_init(new Kotlin.Long(987167468, 1607167915)), new ULong_init(new Kotlin.Long(1246189591, 1816402316))];
  }
  Sha512$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Sha512$Companion_instance = null;
  function Sha512$Companion_getInstance() {
    if (Sha512$Companion_instance === null) {
      new Sha512$Companion();
    }
    return Sha512$Companion_instance;
  }
  Sha512.prototype.digest_ummv9a$ = function (message) {
    var tmp$;
    var originalMessageSizeInBits = message.length * 8 | 0;
    var expandedRemainderOf1024 = (originalMessageSizeInBits + 129 | 0) % 1024;
    if (expandedRemainderOf1024 === 0)
      tmp$ = 0;
    else
      tmp$ = (1024 - expandedRemainderOf1024 | 0) / 8 | 0;
    var zeroAddAmount = tmp$;
    var array = Array_0(zeroAddAmount + 1 | 0);
    var tmp$_0;
    tmp$_0 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_0; i++) {
      var init$result;
      if (i === 0) {
        init$result = new UByte(-128);
      }
       else {
        init$result = new UByte(0);
      }
      array[i] = init$result;
    }
    var expansionArray = array;
    var tmp$_1 = message.concat(expansionArray);
    var elements = this.toPadded128BitByteArray_0(new ULong_init(Kotlin.Long.fromInt(originalMessageSizeInBits)));
    var $receiver = tmp$_1.concat(elements);
    var last = $receiver.length % 128;
    var hasLast = last !== 0;
    var numberOfSlices = $receiver.length / 128 | 0;
    var list = ArrayList_init(0);
    for (var index = 0; index < 0; index++) {
      list.add_11rb$(emptyList());
    }
    var result = list;
    for (var i_0 = 0; i_0 < numberOfSlices; i_0++) {
      result.add_11rb$(slice($receiver, until(Kotlin.imul(i_0, 128), Kotlin.imul(i_0 + 1 | 0, 128))));
    }
    if (hasLast) {
      result.add_11rb$(slice($receiver, until(Kotlin.imul(numberOfSlices, 128), $receiver.length)));
    }
    var destination = ArrayList_init(collectionSizeOrDefault(result, 10));
    var tmp$_2;
    tmp$_2 = result.iterator();
    while (tmp$_2.hasNext()) {
      var item = tmp$_2.next();
      destination.add_11rb$(copyToArray(item));
    }
    var chunks = copyToArray(destination);
    var tmp$_3;
    for (tmp$_3 = 0; tmp$_3 !== chunks.length; ++tmp$_3) {
      var element = chunks[tmp$_3];
      var array_0 = Array_0(80);
      var tmp$_4;
      tmp$_4 = array_0.length - 1 | 0;
      for (var i_1 = 0; i_1 <= tmp$_4; i_1++) {
        var init$result_0;
        if (0 <= i_1 && i_1 < 16) {
          var $this = element[i_1 * 8 | 0];
          var tmp$_5 = new ULong_init((new ULong_init(Kotlin.Long.fromInt($this.data).and(L255))).data.shiftLeft(56));
          var $this_0 = element[(i_1 * 8 | 0) + 1 | 0];
          var other = new ULong_init((new ULong_init(Kotlin.Long.fromInt($this_0.data).and(L255))).data.shiftLeft(48));
          var tmp$_6 = new ULong_init(tmp$_5.data.add(other.data));
          var $this_1 = element[(i_1 * 8 | 0) + 2 | 0];
          var other_0 = new ULong_init((new ULong_init(Kotlin.Long.fromInt($this_1.data).and(L255))).data.shiftLeft(40));
          var tmp$_7 = new ULong_init(tmp$_6.data.add(other_0.data));
          var $this_2 = element[(i_1 * 8 | 0) + 3 | 0];
          var other_1 = new ULong_init((new ULong_init(Kotlin.Long.fromInt($this_2.data).and(L255))).data.shiftLeft(32));
          var tmp$_8 = new ULong_init(tmp$_7.data.add(other_1.data));
          var $this_3 = element[(i_1 * 8 | 0) + 4 | 0];
          var other_2 = new ULong_init((new ULong_init(Kotlin.Long.fromInt($this_3.data).and(L255))).data.shiftLeft(24));
          var tmp$_9 = new ULong_init(tmp$_8.data.add(other_2.data));
          var $this_4 = element[(i_1 * 8 | 0) + 5 | 0];
          var other_3 = new ULong_init((new ULong_init(Kotlin.Long.fromInt($this_4.data).and(L255))).data.shiftLeft(16));
          var tmp$_10 = new ULong_init(tmp$_9.data.add(other_3.data));
          var $this_5 = element[(i_1 * 8 | 0) + 6 | 0];
          var other_4 = new ULong_init((new ULong_init(Kotlin.Long.fromInt($this_5.data).and(L255))).data.shiftLeft(8));
          var tmp$_11 = new ULong_init(tmp$_10.data.add(other_4.data));
          var $this_6 = element[(i_1 * 8 | 0) + 7 | 0];
          var other_5 = new ULong_init(Kotlin.Long.fromInt($this_6.data).and(L255));
          var collected = new ULong_init(tmp$_11.data.add(other_5.data));
          init$result_0 = collected;
        }
         else {
          init$result_0 = new ULong_init(Kotlin.Long.ZERO);
        }
        array_0[i_1] = init$result_0;
      }
      var w = array_0;
      for (var i_2 = 16; i_2 < 80; i_2++) {
        var s0 = this.scheduleSigma0_0(w[i_2 - 15 | 0]);
        var s1 = this.scheduleSigma1_0(w[i_2 - 2 | 0]);
        var $this_7 = new ULong_init(w[i_2 - 16 | 0].data.add(s0.data));
        var other_6 = w[i_2 - 7 | 0];
        w[i_2] = new ULong_init((new ULong_init($this_7.data.add(other_6.data))).data.add(s1.data));
      }
      var a = this.h0;
      var b = this.h1;
      var c = this.h2;
      var d = this.h3;
      var e = this.h4;
      var f = this.h5;
      var g = this.h6;
      var h = this.h7;
      for (var i_3 = 0; i_3 < 80; i_3++) {
        var s1_0 = this.compressionSigma1_0(e);
        var ch = this.ch_0(e, f, g);
        var $this_8 = new ULong_init((new ULong_init(h.data.add(s1_0.data))).data.add(ch.data));
        var other_7 = Sha512$Companion_getInstance().k[i_3];
        var $this_9 = new ULong_init($this_8.data.add(other_7.data));
        var other_8 = w[i_3];
        var temp1 = new ULong_init($this_9.data.add(other_8.data));
        var s0_0 = this.compressionSigma0_0(a);
        var maj = this.maj_0(a, b, c);
        var temp2 = new ULong_init(s0_0.data.add(maj.data));
        h = g;
        g = f;
        f = e;
        e = new ULong_init(d.data.add(temp1.data));
        d = c;
        c = b;
        b = a;
        a = new ULong_init(temp1.data.add(temp2.data));
      }
      var $this_10 = this.h0;
      var other_9 = a;
      this.h0 = new ULong_init($this_10.data.add(other_9.data));
      var $this_11 = this.h1;
      var other_10 = b;
      this.h1 = new ULong_init($this_11.data.add(other_10.data));
      var $this_12 = this.h2;
      var other_11 = c;
      this.h2 = new ULong_init($this_12.data.add(other_11.data));
      var $this_13 = this.h3;
      var other_12 = d;
      this.h3 = new ULong_init($this_13.data.add(other_12.data));
      var $this_14 = this.h4;
      var other_13 = e;
      this.h4 = new ULong_init($this_14.data.add(other_13.data));
      var $this_15 = this.h5;
      var other_14 = f;
      this.h5 = new ULong_init($this_15.data.add(other_14.data));
      var $this_16 = this.h6;
      var other_15 = g;
      this.h6 = new ULong_init($this_16.data.add(other_15.data));
      var $this_17 = this.h7;
      var other_16 = h;
      this.h7 = new ULong_init($this_17.data.add(other_16.data));
    }
    var $receiver_0 = this.toPaddedByteArray_0(this.h0);
    var elements_0 = this.toPaddedByteArray_0(this.h1);
    var $receiver_1 = $receiver_0.concat(elements_0);
    var elements_1 = this.toPaddedByteArray_0(this.h2);
    var $receiver_2 = $receiver_1.concat(elements_1);
    var elements_2 = this.toPaddedByteArray_0(this.h3);
    var $receiver_3 = $receiver_2.concat(elements_2);
    var elements_3 = this.toPaddedByteArray_0(this.h4);
    var $receiver_4 = $receiver_3.concat(elements_3);
    var elements_4 = this.toPaddedByteArray_0(this.h5);
    var $receiver_5 = $receiver_4.concat(elements_4);
    var elements_5 = this.toPaddedByteArray_0(this.h6);
    var $receiver_6 = $receiver_5.concat(elements_5);
    var elements_6 = this.toPaddedByteArray_0(this.h7);
    var digest = $receiver_6.concat(elements_6);
    this.reset_0();
    return digest;
  };
  Sha512.prototype.reset_0 = function () {
    this.h0 = new ULong_init(new Kotlin.Long(-205731576, 1779033703));
    this.h1 = new ULong_init(new Kotlin.Long(-2067093701, -1150833019));
    this.h2 = new ULong_init(new Kotlin.Long(-23791573, 1013904242));
    this.h3 = new ULong_init(new Kotlin.Long(1595750129, -1521486534));
    this.h4 = new ULong_init(new Kotlin.Long(-1377402159, 1359893119));
    this.h5 = new ULong_init(new Kotlin.Long(725511199, -1694144372));
    this.h6 = new ULong_init(new Kotlin.Long(-79577749, 528734635));
    this.h7 = new ULong_init(new Kotlin.Long(327033209, 1541459225));
  };
  Sha512.prototype.scheduleSigma0_0 = function (value) {
    var $this = rotateRight_0(value, 1);
    var other = rotateRight_0(value, 8);
    var tmp$ = new ULong_init($this.data.xor(other.data));
    var other_0 = new ULong_init(value.data.shiftRightUnsigned(7));
    return new ULong_init(tmp$.data.xor(other_0.data));
  };
  Sha512.prototype.scheduleSigma1_0 = function (value) {
    var $this = rotateRight_0(value, 19);
    var other = rotateRight_0(value, 61);
    var tmp$ = new ULong_init($this.data.xor(other.data));
    var other_0 = new ULong_init(value.data.shiftRightUnsigned(6));
    return new ULong_init(tmp$.data.xor(other_0.data));
  };
  Sha512.prototype.compressionSigma0_0 = function (e) {
    var $this = rotateRight_0(e, 28);
    var other = rotateRight_0(e, 34);
    var $this_0 = new ULong_init($this.data.xor(other.data));
    var other_0 = rotateRight_0(e, 39);
    return new ULong_init($this_0.data.xor(other_0.data));
  };
  Sha512.prototype.compressionSigma1_0 = function (a) {
    var $this = rotateRight_0(a, 14);
    var other = rotateRight_0(a, 18);
    var $this_0 = new ULong_init($this.data.xor(other.data));
    var other_0 = rotateRight_0(a, 41);
    return new ULong_init($this_0.data.xor(other_0.data));
  };
  Sha512.prototype.ch_0 = function (x, y, z) {
    var tmp$ = new ULong_init(x.data.and(y.data));
    var other = Sha512$Companion_getInstance().ULONG_MASK;
    var other_0 = new ULong_init((new ULong_init(x.data.xor(other.data))).data.and(z.data));
    return new ULong_init(tmp$.data.xor(other_0.data));
  };
  Sha512.prototype.maj_0 = function (x, y, z) {
    var tmp$ = new ULong_init(x.data.and(y.data));
    var other = new ULong_init(x.data.and(z.data));
    var tmp$_0 = new ULong_init(tmp$.data.xor(other.data));
    var other_0 = new ULong_init(y.data.and(z.data));
    return new ULong_init(tmp$_0.data.xor(other_0.data));
  };
  Sha512.prototype.toPaddedByteArray_0 = function ($receiver) {
    var byteMask = new ULong_init(Kotlin.Long.fromInt(255));
    var array = Array_0(8);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    loop_label: for (var i = 0; i <= tmp$; i++) {
      var init$result;
      init$break: do {
        switch (i) {
          case 7:
            init$result = new UByte(toByte((new ULong_init($receiver.data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 6:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(8))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 5:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(16))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 4:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(24))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 3:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(32))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 2:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(40))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 1:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(48))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 0:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(56))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          default:init$result = new UByte(0);
            break init$break;
        }
      }
       while (false);
      array[i] = init$result;
    }
    return array;
  };
  Sha512.prototype.toPadded128BitByteArray_0 = function ($receiver) {
    var byteMask = new ULong_init(Kotlin.Long.fromInt(255));
    var array = Array_0(16);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    loop_label: for (var i = 0; i <= tmp$; i++) {
      var init$result;
      init$break: do {
        switch (i) {
          case 15:
            init$result = new UByte(toByte((new ULong_init($receiver.data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 14:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(8))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 13:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(16))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 12:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(24))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 11:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(32))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 10:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(40))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 9:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(48))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          case 8:
            init$result = new UByte(toByte((new ULong_init((new ULong_init($receiver.data.shiftRightUnsigned(54))).data.and(byteMask.data))).data.toInt()));
            break init$break;
          default:init$result = new UByte(0);
            break init$break;
        }
      }
       while (false);
      array[i] = init$result;
    }
    return array;
  };
  Sha512.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Sha512',
    interfaces: []
  };
  var package$com = _.com || (_.com = {});
  var package$ionspin = package$com.ionspin || (package$com.ionspin = {});
  var package$kotlin = package$ionspin.kotlin || (package$ionspin.kotlin = {});
  var package$crypto = package$kotlin.crypto || (package$kotlin.crypto = {});
  package$crypto.hexColumsPrint_mgx7ee$ = hexColumsPrint;
  package$crypto.hexColumsPrint_q387ch$ = hexColumsPrint_0;
  package$crypto.hexColumsPrint_uo2ox1$ = hexColumsPrint_1;
  package$crypto.rotateRight_k13f4a$ = rotateRight;
  package$crypto.rotateRight_hc3rh$ = rotateRight_0;
  $$importsForInline$$['crypto-core'] = _;
  Object.defineProperty(Blake2b, 'Companion', {
    get: Blake2b$Companion_getInstance
  });
  var package$blake2b = package$crypto.blake2b || (package$crypto.blake2b = {});
  package$blake2b.Blake2b = Blake2b;
  Object.defineProperty(Sha256, 'Companion', {
    get: Sha256$Companion_getInstance
  });
  var package$sha = package$crypto.sha || (package$crypto.sha = {});
  package$sha.Sha256 = Sha256;
  Object.defineProperty(Sha512, 'Companion', {
    get: Sha512$Companion_getInstance
  });
  package$sha.Sha512 = Sha512;
  Kotlin.defineModule('crypto-core', _);
  return _;
}(module.exports, require('kotlin'), require('bignum')));

//# sourceMappingURL=crypto-core.js.map
